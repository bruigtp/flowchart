#   axis.title.y= element_blank()
# )
#Plot in the margin right
p2 <- dat_no2 %>%
filter(mun != "MA", lags == "Overall") %>%
ggplot(aes(y = mun)) +
geom_point(aes(x = RRfit)) +
geom_linerange(aes(xmin = RRlow, xmax = RRhigh)) +
geom_segment(x = 0, xend = 0, y = 0, yend = 16.5, color = "black", linetype = "dashed") +
scale_x_continuous(trans = "log10") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y= element_blank(),
axis.title.y= element_blank())
#Create a blank plot for the sake of the grid.arrange
blankPlot <- ggplot()+geom_blank(aes(1,1)) + cowplot::theme_nothing()
#Plot in the bottom
p3 <- dat_no2 %>%
filter(mun == "MA", lags != "Overall") %>%
mutate(lags = gsub("Lag ", "", lags),
lags = factor(lags, levels = 0:14)) %>%
ggplot(aes(x = lags)) +
geom_line(aes(y = RRfit)) +
geom_linerange(aes(ymin = RRlow, ymax = RRhigh)) +
geom_line(aes(y = RRfit), group = 1) +
geom_hline(yintercept = 1, color = "black", linetype = "dashed") +
scale_y_continuous(trans = "log10", breaks = seq(1, 1.04, by = 0.02), labels = str_glue("{str_dup(' ', 50)}{seq(1, 1.04, by = 0.02)}")) +
labs(x = "", y = "") +
theme_classic()
#Extract the labels (to arrange it)
#
# labels3 <- cowplot::ggdraw(cowplot::get_y_axis(p3))
# p3 <- p3 + theme(
#   axis.line.y = element_blank(),
#   axis.ticks.y= element_blank(),
#   axis.text.y= element_blank(),
#   axis.title.y= element_blank()
# )
#Juntem els gràfics:
grid.arrange(legend, blankPlot, p1, p2, p3, blankPlot, nrow = 3, ncol = 2,
heights = c(0.4, 1.5, 0.7),
widths = c(80, 20))
#Save plot
png(r"(S:\Bioestadistica\2023_09ONAIR\4_Productes\2_Figures\Heatmap\heatmap_no2.png)",width = 6000,height = 4000,res = 600)
grid.arrange(legend, blankPlot, p1, p2, p3, blankPlot, nrow = 3, ncol = 2,
heights = c(0.4, 1.5, 0.7),
widths = c(80, 20))
dev.off()
dat_pm10
p2
dat_pm10 %>%
filter(mun != "MA", lags == "Overall") %>%
ggplot(aes(y = mun)) +
geom_point(aes(x = RRfit)) +
geom_linerange(aes(xmin = RRlow, xmax = RRhigh)) +
geom_segment(x = 0, xend = 0, y = 0, yend = 16.5, color = "black", linetype = "dashed") +
scale_x_continuous(trans = "log10") +
labs(x = "", y = "") +
theme_classic()
dat_pm10
dat_pm10 %>%
filter(mun != "MA", lags != "Overall") %>%
mutate(
mun = factor(mun, levels = rev(unique(mun)))
) %>%
ggplot(aes(x = factor(lags), y = mun, fill = RRfit)) +
geom_tile() +
scale_fill_gradient2(name = "RR", midpoint = log(1), low = "#009392", mid = "#f6edbd", high = "#cf597e", trans = "log10") +
# scale_fill_carto_c(name = "%", palette = "BurgYl") +
labs(x = "", y = "") +
theme_classic() +
theme(legend.position = "top", legend.key.width=unit(1,"cm"))
dat_pm10 %>%
filter(mun != "MA", lags != "Overall") %>%
mutate(
mun = factor(mun, levels = rev(unique(mun)))
) %>%
ggplot(aes(x = factor(lags), y = mun, fill = RRfit)) +
geom_tile() +
scale_fill_gradient2(name = "RR", midpoint = log(1), low = "#009392", mid = "#f6edbd", high = "#cf597e", trans = "log10") +
# scale_fill_carto_c(name = "%", palette = "BurgYl") +
labs(x = "", y = "") +
theme_classic() +
theme(legend.position = "top", legend.key.width=unit(1,"cm"))
str(dat_pm10)
dat_pm10 %>%
filter(mun != "MA", lags == "Overall")
str(dat_pm10 %>%
filter(mun != "MA", lags == "Overall") )
dat_pm10 %>%
filter(mun != "MA", lags == "Overall") %>%
ggplot(aes(y = mun)) +
geom_point(aes(x = RRfit)) +
geom_linerange(aes(xmin = RRlow, xmax = RRhigh)) +
geom_segment(x = 0, xend = 0, y = 0, yend = 16.5, color = "black", linetype = "dashed") +
scale_x_continuous(trans = "log10") +
labs(x = "", y = "") +
theme_classic()+
dat_pm10 %>%
filter(mun != "MA", lags == "Overall") %>%
ggplot(aes(y = mun)) +
geom_point(aes(x = RRfit)) +
geom_linerange(aes(xmin = RRlow, xmax = RRhigh)) +
geom_segment(x = 0, xend = 0, y = 0, yend = 16.5, color = "black", linetype = "dashed") +
scale_x_continuous(trans = "log10") +
labs(x = "", y = "") +
theme_classic()
dat_pm10 %>%
filter(mun == "MA", lags != "Overall") %>%
mutate(lags = gsub("Lag ", "", lags),
lags = factor(lags, levels = 0:14)) %>%
ggplot(aes(x = lags)) +
geom_line(aes(y = RRfit)) +
geom_linerange(aes(ymin = RRlow, ymax = RRhigh)) +
geom_line(aes(y = RRfit), group = 1) +
geom_hline(yintercept = 1, color = "black", linetype = "dashed") +
scale_y_continuous(trans = "log10", breaks = seq(0.995, 1.015, by = 0.005), labels = str_glue("{str_dup(' ', 47)}{seq(0.995, 1.015, by = 0.005)}")) +
labs(x = "", y = "") +
theme_classic()
#Heatmap for city
p1 <- dat_pm10 %>%
filter(mun != "MA", lags != "Overall") %>%
mutate(
mun = factor(mun, levels = rev(unique(mun)))
) %>%
ggplot(aes(x = factor(lags), y = mun, fill = RRfit)) +
geom_tile() +
scale_fill_gradient2(name = "RR", midpoint = log(1), low = "#009392", mid = "#f6edbd", high = "#cf597e", trans = "log10") +
# scale_fill_carto_c(name = "%", palette = "BurgYl") +
labs(x = "", y = "") +
theme_classic() +
theme(legend.position = "top", legend.key.width=unit(1,"cm"))
#Extract the legend (to arrange it in a proper way)
legend <- get_legend(p1)
p1 <- p1 + theme(legend.position = "none")
#Extract the labels (to arrange it)
#
# labels1 <- cowplot::ggdraw(cowplot::get_y_axis(p1))
# p1 <- p1 + theme(
#   axis.line.y = element_blank(),
#   axis.ticks.y= element_blank(),
#   axis.text.y= element_blank(),
#   axis.title.y= element_blank()
# )
#Plot in the margin right
p2 <- dat_pm10 %>%
filter(mun != "MA", lags == "Overall") %>%
mutate(
mun = factor(mun, levels = rev(unique(mun)))
) %>%
ggplot(aes(y = mun)) +
geom_point(aes(x = RRfit)) +
geom_linerange(aes(xmin = RRlow, xmax = RRhigh)) +
geom_segment(x = 0, xend = 0, y = 0, yend = 16.5, color = "black", linetype = "dashed") +
scale_x_continuous(trans = "log10") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y= element_blank(),
axis.title.y= element_blank())
#Create a blank plot for the sake of the grid.arrange
blankPlot <- ggplot()+geom_blank(aes(1,1)) + cowplot::theme_nothing()
#Plot in the bottom
p3 <- dat_pm10 %>%
filter(mun == "MA", lags != "Overall") %>%
mutate(lags = gsub("Lag ", "", lags),
lags = factor(lags, levels = 0:14)) %>%
ggplot(aes(x = lags)) +
geom_line(aes(y = RRfit)) +
geom_linerange(aes(ymin = RRlow, ymax = RRhigh)) +
geom_line(aes(y = RRfit), group = 1) +
geom_hline(yintercept = 1, color = "black", linetype = "dashed") +
scale_y_continuous(trans = "log10", breaks = seq(0.995, 1.015, by = 0.005), labels = str_glue("{str_dup(' ', 47)}{seq(0.995, 1.015, by = 0.005)}")) +
labs(x = "", y = "") +
theme_classic()
#Extract the labels (to arrange it)
#
# labels3 <- cowplot::ggdraw(cowplot::get_y_axis(p3))
# p3 <- p3 + theme(
#   axis.line.y = element_blank(),
#   axis.ticks.y= element_blank(),
#   axis.text.y= element_blank(),
#   axis.title.y= element_blank()
# )
#Juntem els gràfics:
grid.arrange(legend, blankPlot, p1, p2, p3, blankPlot, nrow = 3, ncol = 2,
heights = c(0.4, 1.5, 0.7),
widths = c(80, 20))
#Save plot
png(r"(S:\Bioestadistica\2023_09ONAIR\4_Productes\2_Figures\Heatmap\heatmap_pm10.png)",width = 6000,height = 4000,res = 600)
grid.arrange(legend, blankPlot, p1, p2, p3, blankPlot, nrow = 3, ncol = 2,
heights = c(0.4, 1.5, 0.7),
widths = c(80, 20))
dev.off()
#Heatmap for city
p1 <- dat_pm25 %>%
filter(mun != "MA", lags != "Overall") %>%
mutate(
mun = factor(mun, levels = rev(unique(mun)))
) %>%
ggplot(aes(x = factor(lags), y = mun, fill = RRfit)) +
geom_tile() +
scale_fill_gradient2(name = "RR", midpoint = log(1), low = "#009392", mid = "#f6edbd", high = "#cf597e", trans = "log10") +
# scale_fill_carto_c(name = "%", palette = "BurgYl") +
labs(x = "", y = "") +
theme_classic() +
theme(legend.position = "top", legend.key.width=unit(1,"cm"))
#Extract the legend (to arrange it in a proper way)
legend <- get_legend(p1)
p1 <- p1 + theme(legend.position = "none")
#Extract the labels (to arrange it)
#
# labels1 <- cowplot::ggdraw(cowplot::get_y_axis(p1))
# p1 <- p1 + theme(
#   axis.line.y = element_blank(),
#   axis.ticks.y= element_blank(),
#   axis.text.y= element_blank(),
#   axis.title.y= element_blank()
# )
#Plot in the margin right
p2 <- dat_pm25 %>%
filter(mun != "MA", lags == "Overall") %>%
mutate(
mun = factor(mun, levels = rev(unique(mun)))
) %>%
ggplot(aes(y = mun)) +
geom_point(aes(x = RRfit)) +
geom_linerange(aes(xmin = RRlow, xmax = RRhigh)) +
geom_segment(x = 0, xend = 0, y = 0, yend = 16.5, color = "black", linetype = "dashed") +
scale_x_continuous(trans = "log10", breaks = seq(0.95, 1.05, by = 0.05)) +
labs(x = "", y = "") +
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y= element_blank(),
axis.title.y= element_blank())
#Create a blank plot for the sake of the grid.arrange
blankPlot <- ggplot()+geom_blank(aes(1,1)) + cowplot::theme_nothing()
#Plot in the bottom
p3 <- dat_pm25 %>%
filter(mun == "MA", lags != "Overall") %>%
mutate(lags = gsub("Lag ", "", lags),
lags = factor(lags, levels = 0:14)) %>%
ggplot(aes(x = lags)) +
geom_line(aes(y = RRfit)) +
geom_linerange(aes(ymin = RRlow, ymax = RRhigh)) +
geom_line(aes(y = RRfit), group = 1) +
geom_hline(yintercept = 1, color = "black", linetype = "dashed") +
scale_y_continuous(trans = "log10", breaks = seq(0.98, 1.04, by = 0.02), labels = str_glue("{str_dup(' ', 16)}{seq(0.98, 1.04, by = 0.02)}")) +
labs(x = "", y = "") +
theme_classic()
#Extract the labels (to arrange it)
#
# labels3 <- cowplot::ggdraw(cowplot::get_y_axis(p3))
# p3 <- p3 + theme(
#   axis.line.y = element_blank(),
#   axis.ticks.y= element_blank(),
#   axis.text.y= element_blank(),
#   axis.title.y= element_blank()
# )
#Juntem els gràfics:
grid.arrange(legend, blankPlot, p1, p2, p3, blankPlot, nrow = 3, ncol = 2,
heights = c(0.4, 1.5, 0.7),
widths = c(80, 20))
#Save plot
png(r"(S:\Bioestadistica\2023_09ONAIR\4_Productes\2_Figures\Heatmap\heatmap_pm25.png)",width = 6000,height = 4000,res = 600)
grid.arrange(legend, blankPlot, p1, p2, p3, blankPlot, nrow = 3, ncol = 2,
heights = c(0.4, 1.5, 0.7),
widths = c(80, 20))
dev.off()
#Heatmap for city
p1 <- dat_no2 %>%
filter(mun != "MA", lags != "Overall") %>%
mutate(
mun = factor(mun, levels = rev(unique(mun)))
) %>%
ggplot(aes(x = factor(lags), y = mun, fill = RRfit)) +
geom_tile() +
scale_fill_gradient2(name = "RR", midpoint = log(1), low = "#009392", mid = "#f6edbd", high = "#cf597e", trans = "log10") +
# scale_fill_carto_c(name = "%", palette = "BurgYl") +
labs(x = "", y = "") +
theme_classic() +
theme(legend.position = "top", legend.key.width=unit(1,"cm"))
#Extract the legend (to arrange it in a proper way)
legend <- get_legend(p1)
p1 <- p1 + theme(legend.position = "none")
#Extract the labels (to arrange it)
#
# labels1 <- cowplot::ggdraw(cowplot::get_y_axis(p1))
# p1 <- p1 + theme(
#   axis.line.y = element_blank(),
#   axis.ticks.y= element_blank(),
#   axis.text.y= element_blank(),
#   axis.title.y= element_blank()
# )
#Plot in the margin right
p2 <- dat_no2 %>%
filter(mun != "MA", lags == "Overall") %>%
mutate(
mun = factor(mun, levels = rev(unique(mun)))
) %>%
ggplot(aes(y = mun)) +
geom_point(aes(x = RRfit)) +
geom_linerange(aes(xmin = RRlow, xmax = RRhigh)) +
geom_segment(x = 0, xend = 0, y = 0, yend = 16.5, color = "black", linetype = "dashed") +
scale_x_continuous(trans = "log10") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y= element_blank(),
axis.title.y= element_blank())
#Create a blank plot for the sake of the grid.arrange
blankPlot <- ggplot()+geom_blank(aes(1,1)) + cowplot::theme_nothing()
#Plot in the bottom
p3 <- dat_no2 %>%
filter(mun == "MA", lags != "Overall") %>%
mutate(lags = gsub("Lag ", "", lags),
lags = factor(lags, levels = 0:14)) %>%
ggplot(aes(x = lags)) +
geom_line(aes(y = RRfit)) +
geom_linerange(aes(ymin = RRlow, ymax = RRhigh)) +
geom_line(aes(y = RRfit), group = 1) +
geom_hline(yintercept = 1, color = "black", linetype = "dashed") +
scale_y_continuous(trans = "log10", breaks = seq(1, 1.04, by = 0.02), labels = str_glue("{str_dup(' ', 50)}{seq(1, 1.04, by = 0.02)}")) +
labs(x = "", y = "") +
theme_classic()
#Extract the labels (to arrange it)
#
# labels3 <- cowplot::ggdraw(cowplot::get_y_axis(p3))
# p3 <- p3 + theme(
#   axis.line.y = element_blank(),
#   axis.ticks.y= element_blank(),
#   axis.text.y= element_blank(),
#   axis.title.y= element_blank()
# )
#Juntem els gràfics:
grid.arrange(legend, blankPlot, p1, p2, p3, blankPlot, nrow = 3, ncol = 2,
heights = c(0.4, 1.5, 0.7),
widths = c(80, 20))
#Save plot
png(r"(S:\Bioestadistica\2023_09ONAIR\4_Productes\2_Figures\Heatmap\heatmap_no2.png)",width = 6000,height = 4000,res = 600)
grid.arrange(legend, blankPlot, p1, p2, p3, blankPlot, nrow = 3, ncol = 2,
heights = c(0.4, 1.5, 0.7),
widths = c(80, 20))
dev.off()
View(dat_pm10)
trail
trial
library(epiR)
#Llibreries
library(kableExtra) # per utilitzar kable
library(dplyr)
library(tidyr)
library(tibble)
library(purrr)
library(stringr)
library(captioner) # enumera taules i figures
library(lme4) #models  Mixtes
library(sjPlot)
library(RColorBrewer) #paletes de colors
library(ggplot2)
library(grid)
library(gridExtra)
library(readxl)
library(gtsummary)
library(psych)
library(PerformanceAnalytics)
library(factoextra)
library(kmed)
library(fpc)
library(rcartocolor)
library(patchwork)
library(cluster)
library(vcd)
library(corrplot)
library(patchwork)
library(cobalt)
# library(flowchart)
#Enumerar taules i figures
fig_nums <- captioner(prefix = 'Figura')
tab_nums <- captioner(prefix = 'Tabla')
###############
#Dades
################
setwd('S:/Bioestadistica/2023_11ENegredo')
dades_ana<-'./2_Dades/2_Analisi'
Funcions<-'I:/CTebe/3_CodiR/Funcions'
Themes<-'I:/CTebe/3_CodiR/Themes'
#Source functions:
source(file.path(Funcions, 'flowchart.R'))
#Source themes:
source(file.path(Themes, 'gtsummary_theme_brui.R'))
reset_gtsummary_theme()
set_gtsummary_theme(theme_brui)
trial %>% tbl_summary()
# Chunk 1
rm(list=ls())
# #Package renv (restore package versions):
# codiR <- "S:/Bioestadistica/2023_11ENegredo/3_CodiR"
# renv::init(codiR) #To generate a copy of the package versions (first time)
# renv::snapshot(codiR) #To regenerate the copy if we change or update any library (recommended to use at the end of the analysis)
# renv::restore(codiR) #To restore the package versions (for the future)
library(epiR)
#Llibreries
library(kableExtra) # per utilitzar kable
library(dplyr)
library(tidyr)
library(tibble)
library(purrr)
library(stringr)
library(captioner) # enumera taules i figures
library(lme4) #models  Mixtes
library(sjPlot)
library(RColorBrewer) #paletes de colors
library(ggplot2)
library(grid)
library(gridExtra)
library(readxl)
library(gtsummary)
library(psych)
library(PerformanceAnalytics)
library(factoextra)
library(kmed)
library(fpc)
library(rcartocolor)
library(patchwork)
library(cluster)
library(vcd)
library(corrplot)
library(patchwork)
library(cobalt)
# library(flowchart)
#Enumerar taules i figures
fig_nums <- captioner(prefix = 'Figura')
tab_nums <- captioner(prefix = 'Tabla')
###############
#Dades
################
setwd('S:/Bioestadistica/2023_11ENegredo')
dades_ana<-'./2_Dades/2_Analisi'
Funcions<-'I:/CTebe/3_CodiR/Funcions'
Themes<-'I:/CTebe/3_CodiR/Themes'
#Source functions:
source(file.path(Funcions, 'flowchart.R'))
#Source themes:
source(file.path(Themes, 'gtsummary_theme_brui.R'))
reset_gtsummary_theme()
set_gtsummary_theme(theme_brui)
#Load data & dictionary
load(file.path(dades_ana, "data_v5.Rda"))
load(file.path(dades_ana, "dic_v2.Rda"))
load(file.path(dades_ana, "event_form.Rda"))
#Load data dictionary
var_lab <- read_excel("3_CodiR/var_lab.xlsx")
sdata <- data %>%
filter(is.na(redcap_repeat_instance), (n_visit == 2 & redcap_event_name == "valoracin_2_arm_1") | (n_visit == 1 & redcap_event_name == "valoracin_1_arm_1")) %>%
select(
"Barthel" = alterado_bar,
"Lawton" = alterado_law,
"Auditive" = alterado_def,
"Urinary" = alterado_inc, #molts missings,
"Pittsburg" = alterado_pit,
"Pfeiffer" = alterado_pfe2,
"Fried" = alterado_fri, #molts missings
"SPPB" = alterado_spp,
"MNA" = alterado_mna,
"Barber" = alterado_barb,
"FAC" = alterado_fac,
"Depression" = alterado_depre_psi,
"Complain" = alterado_qj_psi,
"NEU-Screen" = neu_psi_alt
) %>%
mutate_all(~factor(tolower(.x), levels = c("no alterado", "alterado")))
#Heatmap:
sdata_p2 <- tibble(expand.grid(x = names(sdata), y = names(sdata))) %>%
mutate(
alter = map2_dbl(x, y, function(s1, s2) {
df <- sdata %>%
select(all_of(c(s1, s2))) %>%
na.omit()
N <- nrow(df)
n <- sum(df[[s1]] == df[[s2]])
n*100/N
})
) %>%
pivot_wider(names_from = y, values_from = alter) %>%
column_to_rownames(var = "x") %>%
as.matrix()
corrplot(sdata_p2, type="upper", col = carto_pal(100, "SunsetDark"), is.corr = FALSE, col.lim = c(0, 100))
rm(list = ls())
library("devtools")
library(roxygen2)
setwd(r"(I:\CTebe\2_Projectes\2024_02Flowchart\3_CodiR\flowchart)")
#To create the package: https://www.r-bloggers.com/2020/07/how-to-write-your-own-r-package-and-publish-it-on-cran/
#1. Create an R project to a new existing directory and select R package
#2. Write a script for each function providing all information.
#3. Write a script for each built-in dataset, and save them in a data/ folder.
#4. Copy the license MIT file (from an existing package or https://www.r-project.org/Licenses/) and add this to .Rbuildignore: ^LICENSE\.md$
#5. Modify DESCRIPTION.md with the information about this package.
#6. Write a NEWS.md in which we will write the news from each update: usethis::use_news_md()
#7. Write a vignette: usethis::use_vignette("NAME_VIGNETTE")
#8. Specify all of the packages that we have to use:
# purrr::map(c("Gmisc", "grid", "tidyr", "dplyr", "purrr", "stringr", "tibble", "rlang"), usethis::use_package)
#usethis::use_pipe()
# Follow the next steps (we will also have to follow them in each update):
devtools::document()
devtools::check()
# devtools::check(vignettes = FALSE) # Check
